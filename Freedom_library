local UILibrary = {}

function UILibrary:CreateWindow(config)
    local ScreenGui = Instance.new("ScreenGui")
    local MainFrame = Instance.new("Frame")
    local TitleBar = Instance.new("TextLabel")

    ScreenGui.Name = config.Name or "UI_Library"
    ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, config.Width or 500, 0, config.Height or 400)
    MainFrame.Position = UDim2.new(0.5, -(config.Width or 500) / 2, 0.5, -(config.Height or 400) / 2)
    MainFrame.BackgroundColor3 = config.BackgroundColor or Color3.fromRGB(30, 30, 30)
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = ScreenGui

    TitleBar.Name = "TitleBar"
    TitleBar.Size = UDim2.new(1, 0, 0, 30)
    TitleBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    TitleBar.Text = config.Title or "My UI"
    TitleBar.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleBar.Font = Enum.Font.SourceSansBold
    TitleBar.TextSize = 18
    TitleBar.Parent = MainFrame

    local Window = {
        ScreenGui = ScreenGui,
        MainFrame = MainFrame,
        Tabs = {}
    }

    return setmetatable(Window, { __index = UILibrary })
end

function UILibrary:AddTab(name)
    local TabButton = Instance.new("TextButton")
    local TabFrame = Instance.new("Frame")
    local TabsFrame = self.MainFrame:FindFirstChild("TabsFrame")

    if not TabsFrame then
        TabsFrame = Instance.new("Frame")
        TabsFrame.Name = "TabsFrame"
        TabsFrame.Size = UDim2.new(0, 120, 1, -30)
        TabsFrame.Position = UDim2.new(0, 0, 0, 30)
        TabsFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        TabsFrame.Parent = self.MainFrame
    end

    TabButton.Name = name
    TabButton.Text = name
    TabButton.Size = UDim2.new(1, 0, 0, 30)
    TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    TabButton.Font = Enum.Font.SourceSans
    TabButton.TextSize = 16
    TabButton.Parent = TabsFrame

    TabFrame.Name = name
    TabFrame.Size = UDim2.new(1, -120, 1, -30)
    TabFrame.Position = UDim2.new(0, 120, 0, 30)
    TabFrame.BackgroundTransparency = 1
    TabFrame.Visible = false
    TabFrame.Parent = self.MainFrame

    TabButton.MouseButton1Click:Connect(function()
        for _, frame in pairs(self.MainFrame:GetChildren()) do
            if frame:IsA("Frame") and frame.Name ~= "TabsFrame" and frame ~= TabFrame then
                frame.Visible = false
            end
        end
        TabFrame.Visible = true
    end)

    self.Tabs[name] = TabFrame
    return TabFrame
end

function UILibrary:AddButton(tabName, buttonConfig)
    local Tab = self.Tabs[tabName]
    if not Tab then warn("Tab not found: " .. tabName) return end

    local Button = Instance.new("TextButton")
    Button.Text = buttonConfig.Name or "Button"
    Button.Size = UDim2.new(0, 200, 0, 50)
    Button.Position = UDim2.new(0, 10, 0, (#Tab:GetChildren() * 60) - 50)
    Button.BackgroundColor3 = buttonConfig.Color or Color3.fromRGB(60, 60, 60)
    Button.TextColor3 = Color3.fromRGB(255, 255, 255)
    Button.Font = Enum.Font.SourceSans
    Button.TextSize = 16
    Button.Parent = Tab

    Button.MouseButton1Click:Connect(buttonConfig.Callback or function()
        print("Button clicked!")
    end)

    return Button
end

function UILibrary:AddToggle(tabName, toggleConfig)
    local Tab = self.Tabs[tabName]
    if not Tab then warn("Tab not found: " .. tabName) return end

    local Toggle = Instance.new("TextButton")
    local State = toggleConfig.Default or false
    Toggle.Text = (State and "[ON] " or "[OFF] ") .. (toggleConfig.Name or "Toggle")
    Toggle.Size = UDim2.new(0, 200, 0, 50)
    Toggle.Position = UDim2.new(0, 10, 0, (#Tab:GetChildren() * 60) - 50)
    Toggle.BackgroundColor3 = toggleConfig.Color or Color3.fromRGB(60, 60, 60)
    Toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
    Toggle.Font = Enum.Font.SourceSans
    Toggle.TextSize = 16
    Toggle.Parent = Tab

    Toggle.MouseButton1Click:Connect(function()
        State = not State
        Toggle.Text = (State and "[ON] " or "[OFF] ") .. (toggleConfig.Name or "Toggle")
        if toggleConfig.Callback then
            toggleConfig.Callback(State)
        end
    end)

    return Toggle
end

return UILibrary